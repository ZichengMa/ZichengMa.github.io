<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://zichengma.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://zichengma.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-07-11T21:34:20+00:00</updated><id>https://zichengma.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">a post with custom blockquotes</title><link href="https://zichengma.github.io/blog/2023/custom-blockquotes/" rel="alternate" type="text/html" title="a post with custom blockquotes"/><published>2023-05-12T19:53:00+00:00</published><updated>2023-05-12T19:53:00+00:00</updated><id>https://zichengma.github.io/blog/2023/custom-blockquotes</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/custom-blockquotes/"><![CDATA[<p>This post shows how to add custom styles for blockquotes. Based on <a href="https://github.com/sighingnow/jekyll-gitbook">jekyll-gitbook</a> implementation.</p> <p>We decided to support the same custom blockquotes as in <a href="https://sighingnow.github.io/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html">jekyll-gitbook</a>, which are also found in a lot of other sitesâ€™ styles. The styles definitions can be found on the <a href="https://github.com/alshedivat/al-folio/blob/master/_sass/_base.scss">_base.scss</a> file, more specifically:</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Tips, warnings, and dangers */</span>
<span class="nc">.post</span> <span class="nc">.post-content</span> <span class="nt">blockquote</span> <span class="p">{</span>
    <span class="k">&amp;</span><span class="nc">.block-tip</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-warning</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-danger</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>A regular blockquote can be used as following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; This is a regular blockquote</span>
<span class="gt">&gt; and it can be used as usual</span>
</code></pre></div></div> <blockquote> <p>This is a regular blockquote and it can be used as usual</p> </blockquote> <p>These custom styles can be used by adding the specific class to the blockquote, as follows:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; A tip can be used when you want to give advice</span>
<span class="gt">&gt; related to a certain content.</span>
{: .block-tip }
</code></pre></div></div> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>A tip can be used when you want to give advice related to a certain content.</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote>]]></content><author><name></name></author><category term="sample-posts"/><category term="blockquotes"/><summary type="html"><![CDATA[an example of a blog post with custom blockquotes]]></summary></entry><entry><title type="html">a post with table of contents on a sidebar</title><link href="https://zichengma.github.io/blog/2023/sidebar-table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents on a sidebar"/><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>https://zichengma.github.io/blog/2023/sidebar-table-of-contents</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/sidebar-table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents as a sidebar.</p> <h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2> <p>To add a table of contents to a post as a sidebar, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you wish to display the sidebar to the right, simply change <code class="language-plaintext highlighter-rouge">left</code> to <code class="language-plaintext highlighter-rouge">right</code>.</p> <h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h2 data-toc-text="Customizing" id="customizing-your-table-of-contents">Customizing Your Table of Contents</h2> <p>If you want to learn more about how to customize the table of contents of your sidebar, you can check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p> <h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">a post with audios</title><link href="https://zichengma.github.io/blog/2023/audios/" rel="alternate" type="text/html" title="a post with audios"/><published>2023-04-25T10:25:00+00:00</published><updated>2023-04-25T10:25:00+00:00</updated><id>https://zichengma.github.io/blog/2023/audios</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/audios/"><![CDATA[<p>This is an example post with audios. It supports local audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="including"/><category term="audios"/><summary type="html"><![CDATA[this is what included audios could look like]]></summary></entry><entry><title type="html">a post with videos</title><link href="https://zichengma.github.io/blog/2023/videos/" rel="alternate" type="text/html" title="a post with videos"/><published>2023-04-24T21:01:00+00:00</published><updated>2023-04-24T21:01:00+00:00</updated><id>https://zichengma.github.io/blog/2023/videos</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/videos/"><![CDATA[<p>This is an example post with videos. It supports local video files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <p>It does also support embedding videos from different sources. Here are some examples:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="including"/><category term="videos"/><summary type="html"><![CDATA[this is what included videos could look like]]></summary></entry><entry><title type="html">k8s operator practice</title><link href="https://zichengma.github.io/blog/2023/k8s-operator-practice/" rel="alternate" type="text/html" title="k8s operator practice"/><published>2023-03-26T20:28:15+00:00</published><updated>2023-03-26T20:28:15+00:00</updated><id>https://zichengma.github.io/blog/2023/k8s-operator-practice</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/k8s-operator-practice/"><![CDATA[<p>I am learning how to write Kubernetes operator these days. This post is used to record some basic definition and a very good sample controller implemented by <a href="http://workshop.coreostrain.me/lab/go-operator/podset/">RedHat</a>.</p> <h3 id="introduction-to-kubernetes-operators">Introduction to Kubernetes Operators</h3> <p>Kubernetes is a powerful platform for managing containerized applications at scale. While Kubernetes provides a robust set of primitives for deploying and managing applications, it can be challenging to build and manage complex applications using only these primitives. This is where Kubernetes Operators come in.</p> <p>An Operator is a method of packaging, deploying, and managing a Kubernetes application. Operators use custom resources, controllers, and reconciliation loops to automate the deployment and management of complex applications on Kubernetes. In this article, we will explore the concept of Operators in Kubernetes and dive into the details of building an Operator using Go.</p> <h3 id="reconciler-overview">Reconciler Overview</h3> <p>One of the key components of a Kubernetes Operator is the reconciler. The reconciler is responsible for comparing the desired state of a Kubernetes resource with its current state and taking actions to reconcile any differences between the two.</p> <p>In Go-based Kubernetes Operators, the reconciler is typically implemented as a controller. The controller watches for changes to a specific type of Kubernetes resource, and when a change is detected, it initiates a reconciliation loop. During the reconciliation loop, the controller retrieves the current state of the resource from the Kubernetes API server, compares it with the desired state, and takes actions to reconcile any differences.</p> <h3 id="code-analysis">Code analysis</h3> <p>The CRDs we defined is PodSet. Spec: Replicas(How many pods we want) Status: ReadyReplicas(The number of ready replicas) PodNames(A slice for all ready replicas name) Controller will try to update Status.ReadyReplicas = Spec.Replicas and up/down scaling pods based on the difference.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/</span>

<span class="k">package</span> <span class="n">controllers</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"context"</span>
	<span class="s">"reflect"</span>

	<span class="n">corev1</span> <span class="s">"k8s.io/api/core/v1"</span>
	<span class="s">"k8s.io/apimachinery/pkg/api/errors"</span>
	<span class="n">metav1</span> <span class="s">"k8s.io/apimachinery/pkg/apis/meta/v1"</span>
	<span class="s">"k8s.io/apimachinery/pkg/labels"</span>
	<span class="s">"k8s.io/apimachinery/pkg/runtime"</span>
	<span class="n">ctrl</span> <span class="s">"sigs.k8s.io/controller-runtime"</span>
	<span class="s">"sigs.k8s.io/controller-runtime/pkg/client"</span>
	<span class="s">"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"</span>
	<span class="s">"sigs.k8s.io/controller-runtime/pkg/log"</span>

	<span class="n">batchv1</span> <span class="s">"tutorial.kubebuilder.io/operator-practice/api/v1"</span>
<span class="p">)</span>

<span class="c">// PodSetReconciler reconciles a PodSet object</span>
<span class="k">type</span> <span class="n">PodSetReconciler</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">client</span><span class="o">.</span><span class="n">Client</span>
	<span class="n">Scheme</span> <span class="o">*</span><span class="n">runtime</span><span class="o">.</span><span class="n">Scheme</span>
<span class="p">}</span>

<span class="c">//+kubebuilder:rbac:groups=batch.tutorial.kubebuilder.io,resources=podsets,verbs=get;list;watch;create;update;patch;delete</span>
<span class="c">//+kubebuilder:rbac:groups=batch.tutorial.kubebuilder.io,resources=podsets/status,verbs=get;update;patch</span>
<span class="c">//+kubebuilder:rbac:groups=batch.tutorial.kubebuilder.io,resources=podsets/finalizers,verbs=update</span>

<span class="c">// Reconcile is part of the main kubernetes reconciliation loop which aims to</span>
<span class="c">// move the current state of the cluster closer to the desired state.</span>
<span class="c">// TODO(user): Modify the Reconcile function to compare the state specified by</span>
<span class="c">// the PodSet object against the actual cluster state, and then</span>
<span class="c">// perform operations to make the cluster state reflect the state specified by</span>
<span class="c">// the user.</span>
<span class="c">//</span>
<span class="c">// For more details, check Reconcile and its Result here:</span>
<span class="c">// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.14.1/pkg/reconcile</span>
<span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="o">*</span><span class="n">PodSetReconciler</span><span class="p">)</span> <span class="n">Reconcile</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">(</span><span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">log</span> <span class="o">:=</span> <span class="n">log</span><span class="o">.</span><span class="n">FromContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>

	<span class="c">// TODO(user): your logic here</span>

	<span class="c">// listen to the creation of PodSet objects</span>

	<span class="c">// fetch the PodSet object</span>
	<span class="n">podset</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">batchv1</span><span class="o">.</span><span class="n">PodSet</span><span class="p">{}</span>
	<span class="n">err</span> <span class="o">:=</span> <span class="n">r</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">TODO</span><span class="p">(),</span> <span class="n">req</span><span class="o">.</span><span class="n">NamespacedName</span><span class="p">,</span> <span class="n">podset</span><span class="p">)</span> <span class="c">// get the PodSet object from the API server by its name and namespace and store it in the podset variable</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">errors</span><span class="o">.</span><span class="n">IsNotFound</span><span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="p">{</span>
			<span class="c">// Request object not found, could have been deleted after reconcile request.</span>
			<span class="c">// Owned objects are automatically garbage collected. For additional cleanup logic use finalizers.</span>
			<span class="c">// Return and don't requeue</span>
			<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{},</span> <span class="no">nil</span>
		<span class="p">}</span>
		<span class="c">// Error reading the object - requeue the request.</span>
		<span class="c">// If the error is not a NotFound error, the second if statement is triggered, and the controller</span>
		<span class="c">// returns a ctrl.Result{} along with the original error to requeue the request for reconciliation.</span>
		<span class="c">// This is done to allow the controller to retry the operation at a later time, in case the error was temporary or transient.</span>
		<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{},</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">podList</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">corev1</span><span class="o">.</span><span class="n">PodList</span><span class="p">{}</span> <span class="c">// create a new list of pods not podsets!</span>
	<span class="c">// The lbs variable is a map of labels that will be used to filter the list of pods. In this case, the labels are set to app=podset.Name and version=v0.1.</span>
	<span class="c">// This means that the query will only return pods that have the app label set to the name of the podset object and the version label set to v0.1.</span>
	<span class="n">lbs</span> <span class="o">:=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
		<span class="s">"app"</span><span class="o">:</span>     <span class="n">podset</span><span class="o">.</span><span class="n">Name</span><span class="p">,</span>
		<span class="s">"version"</span><span class="o">:</span> <span class="s">"v0.1"</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="n">labelSelector</span> <span class="o">:=</span> <span class="n">labels</span><span class="o">.</span><span class="n">SelectorFromSet</span><span class="p">(</span><span class="n">lbs</span><span class="p">)</span> <span class="c">// create a label selector from the lbs map</span>
	<span class="c">// the listOps variable is a client.ListOptions object that contains the options for querying the Kubernetes API server.</span>
	<span class="n">listOps</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">client</span><span class="o">.</span><span class="n">ListOptions</span><span class="p">{</span><span class="n">Namespace</span><span class="o">:</span> <span class="n">podset</span><span class="o">.</span><span class="n">Namespace</span><span class="p">,</span> <span class="n">LabelSelector</span><span class="o">:</span> <span class="n">labelSelector</span><span class="p">}</span> <span class="c">// create a list options object with the namespace and label selector</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">List</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">TODO</span><span class="p">(),</span> <span class="n">podList</span><span class="p">,</span> <span class="n">listOps</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{},</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="c">// Count the pods that are pending or running as available</span>
	<span class="k">var</span> <span class="n">available</span> <span class="p">[]</span><span class="n">corev1</span><span class="o">.</span><span class="n">Pod</span>
	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">pod</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">podList</span><span class="o">.</span><span class="n">Items</span> <span class="p">{</span>
		<span class="c">// For each pod, it first checks whether the DeletionTimestamp field is set.</span>
		<span class="c">// If it is, this means that the pod is scheduled for deletion, and the code skips it</span>
		<span class="k">if</span> <span class="n">pod</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="o">.</span><span class="n">DeletionTimestamp</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="c">// If the pod is not scheduled for deletion, then check whether the pod's Status.Phase field is set to either corev1.PodRunning or corev1.PodPending.</span>
		<span class="c">// If the pod is in one of these states, it is considered available, and its reference is added to the available slice.</span>
		<span class="k">if</span> <span class="n">pod</span><span class="o">.</span><span class="n">Status</span><span class="o">.</span><span class="n">Phase</span> <span class="o">==</span> <span class="n">corev1</span><span class="o">.</span><span class="n">PodRunning</span> <span class="o">||</span> <span class="n">pod</span><span class="o">.</span><span class="n">Status</span><span class="o">.</span><span class="n">Phase</span> <span class="o">==</span> <span class="n">corev1</span><span class="o">.</span><span class="n">PodPending</span> <span class="p">{</span>
			<span class="n">available</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">available</span><span class="p">,</span> <span class="n">pod</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">numAvailable</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">available</span><span class="p">))</span> <span class="c">// get the number of available pods</span>

	<span class="c">// This code block creates a new slice of strings called availableNames,</span>
	<span class="c">// which contains the names of all the available pods returned by the previous code block.</span>
	<span class="n">availableNames</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{}</span>
	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">pod</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">available</span> <span class="p">{</span>
		<span class="n">availableNames</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">availableNames</span><span class="p">,</span> <span class="n">pod</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c">// Update the status if necessary</span>
	<span class="n">status</span> <span class="o">:=</span> <span class="n">batchv1</span><span class="o">.</span><span class="n">PodSetStatus</span><span class="p">{</span>
		<span class="n">PodNames</span><span class="o">:</span>      <span class="n">availableNames</span><span class="p">,</span>
		<span class="n">ReadyReplicas</span><span class="o">:</span> <span class="n">numAvailable</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="c">// The code first checks whether the podset.Status field is equal to the new status value using the reflect.DeepEqual() function.</span>
	<span class="c">// If the two values are not equal, it means that the status value has been updated and needs to be written back to the Kubernetes API server.</span>
	<span class="k">if</span> <span class="o">!</span><span class="n">reflect</span><span class="o">.</span><span class="n">DeepEqual</span><span class="p">(</span><span class="n">podset</span><span class="o">.</span><span class="n">Status</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">podset</span><span class="o">.</span><span class="n">Status</span> <span class="o">=</span> <span class="n">status</span>
		<span class="n">err</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">Status</span><span class="p">()</span><span class="o">.</span><span class="n">Update</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">TODO</span><span class="p">(),</span> <span class="n">podset</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="s">"Failed to update PodSet status"</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{},</span> <span class="n">err</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="n">numAvailable</span> <span class="o">==</span> <span class="n">podset</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">Replicas</span> <span class="p">{</span>
		<span class="c">// If the number of available pods is equal to the number of replicas specified in the podset.Spec.Replicas field,</span>
		<span class="c">// then the controller returns a ctrl.Result{} object without an error to indicate that the reconciliation is complete.</span>
		<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{},</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="c">// Scale up or down</span>
	<span class="k">if</span> <span class="n">numAvailable</span> <span class="o">&gt;</span> <span class="n">podset</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">Replicas</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Scaling down pods"</span><span class="p">,</span> <span class="s">"Currently available"</span><span class="p">,</span> <span class="n">numAvailable</span><span class="p">,</span> <span class="s">"Required replicas"</span><span class="p">,</span> <span class="n">podset</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">Replicas</span><span class="p">)</span>
		<span class="n">diff</span> <span class="o">:=</span> <span class="n">numAvailable</span> <span class="o">-</span> <span class="n">podset</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">Replicas</span>
		<span class="n">dpods</span> <span class="o">:=</span> <span class="n">available</span><span class="p">[</span><span class="o">:</span><span class="n">diff</span><span class="p">]</span>
		<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">dpod</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">dpods</span> <span class="p">{</span>
			<span class="n">err</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">TODO</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">dpod</span><span class="p">)</span> <span class="c">// Writer interface --&gt; Create Delete Update ...</span>
			<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
				<span class="n">log</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="s">"Failed to delete pod"</span><span class="p">,</span> <span class="s">"pod.name"</span><span class="p">,</span> <span class="n">dpod</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
				<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{},</span> <span class="n">err</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{</span><span class="n">Requeue</span><span class="o">:</span> <span class="no">true</span><span class="p">},</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="n">numAvailable</span> <span class="o">&lt;</span> <span class="n">podset</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">Replicas</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Scaling up pods"</span><span class="p">,</span> <span class="s">"Currently available"</span><span class="p">,</span> <span class="n">numAvailable</span><span class="p">,</span> <span class="s">"Required replicas"</span><span class="p">,</span> <span class="n">podset</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">Replicas</span><span class="p">)</span>
		<span class="c">// Define a new Pod object</span>
		<span class="n">pod</span> <span class="o">:=</span> <span class="n">newPodForCR</span><span class="p">(</span><span class="n">podset</span><span class="p">)</span>
		<span class="c">// Set PodSet instance as the owner and controller</span>
		<span class="c">// This ensures that the new pod is "owned" by the PodSet object and is managed by the controller.</span>
		<span class="c">// When a child object is created, it is important to set a reference to its owner object using the SetControllerReference function.</span>
		<span class="c">// This ensures that the owner object is set as the "controller" of the child object,</span>
		<span class="c">// which allows Kubernetes to automatically manage the child object's lifecycle and ensures that it is deleted when the owner object is deleted.</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">controllerutil</span><span class="o">.</span><span class="n">SetControllerReference</span><span class="p">(</span><span class="n">podset</span><span class="p">,</span> <span class="n">pod</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">Scheme</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{},</span> <span class="n">err</span>
		<span class="p">}</span>
		<span class="n">err</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">TODO</span><span class="p">(),</span> <span class="n">pod</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="s">"Failed to create pod"</span><span class="p">,</span> <span class="s">"pod.name"</span><span class="p">,</span> <span class="n">pod</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{},</span> <span class="n">err</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{</span><span class="n">Requeue</span><span class="o">:</span> <span class="no">true</span><span class="p">},</span> <span class="no">nil</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Result</span><span class="p">{},</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="c">// TODO: Add a function called newPodForCR() that creates a new pod object for the podset object passed as an argument.</span>
<span class="c">// args: podset *batchv1.PodSet</span>
<span class="c">// newPodForCR returns a busybox pod with the same name/namespace as the cr</span>
<span class="k">func</span> <span class="n">newPodForCR</span><span class="p">(</span><span class="n">cr</span> <span class="o">*</span><span class="n">batchv1</span><span class="o">.</span><span class="n">PodSet</span><span class="p">)</span> <span class="o">*</span><span class="n">corev1</span><span class="o">.</span><span class="n">Pod</span> <span class="p">{</span>
	<span class="c">// creates a map of labels called labels, which contains two key-value pairs:</span>
	<span class="c">// app set to the name of the PodSet object, and version set to "v0.1".</span>
	<span class="c">// These labels are used to identify the pods created by the PodSet object.</span>
	<span class="n">labels</span> <span class="o">:=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
		<span class="s">"app"</span><span class="o">:</span>     <span class="n">cr</span><span class="o">.</span><span class="n">Name</span><span class="p">,</span>
		<span class="s">"version"</span><span class="o">:</span> <span class="s">"v0.1"</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">corev1</span><span class="o">.</span><span class="n">Pod</span><span class="p">{</span>
		<span class="n">ObjectMeta</span><span class="o">:</span> <span class="n">metav1</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="p">{</span>
			<span class="n">GenerateName</span><span class="o">:</span> <span class="n">cr</span><span class="o">.</span><span class="n">Name</span> <span class="o">+</span> <span class="s">"-pod-"</span><span class="p">,</span> <span class="c">// GenerateName is used to generate a unique name for the pod.</span>
			<span class="n">Namespace</span><span class="o">:</span>    <span class="n">cr</span><span class="o">.</span><span class="n">Namespace</span><span class="p">,</span>
			<span class="n">Labels</span><span class="o">:</span>       <span class="n">labels</span><span class="p">,</span>
		<span class="p">},</span>
		<span class="n">Spec</span><span class="o">:</span> <span class="n">corev1</span><span class="o">.</span><span class="n">PodSpec</span><span class="p">{</span>
			<span class="n">Containers</span><span class="o">:</span> <span class="p">[]</span><span class="n">corev1</span><span class="o">.</span><span class="n">Container</span><span class="p">{</span>
				<span class="p">{</span>
					<span class="n">Name</span><span class="o">:</span>    <span class="s">"busybox"</span><span class="p">,</span>
					<span class="n">Image</span><span class="o">:</span>   <span class="s">"busybox"</span><span class="p">,</span>
					<span class="n">Command</span><span class="o">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"sleep"</span><span class="p">,</span> <span class="s">"3600"</span><span class="p">},</span>
				<span class="p">},</span>
			<span class="p">},</span>
		<span class="p">},</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c">// SetupWithManager sets up the controller with the Manager.</span>
<span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="o">*</span><span class="n">PodSetReconciler</span><span class="p">)</span> <span class="n">SetupWithManager</span><span class="p">(</span><span class="n">mgr</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Manager</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">NewControllerManagedBy</span><span class="p">(</span><span class="n">mgr</span><span class="p">)</span><span class="o">.</span>
		<span class="n">For</span><span class="p">(</span><span class="o">&amp;</span><span class="n">batchv1</span><span class="o">.</span><span class="n">PodSet</span><span class="p">{})</span><span class="o">.</span>
		<span class="n">Complete</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="notes"/><summary type="html"><![CDATA[Introduction about k8s operator and a sample code of a very simple controller.]]></summary></entry><entry><title type="html">displaying beautiful tables with Bootstrap Tables</title><link href="https://zichengma.github.io/blog/2023/tables/" rel="alternate" type="text/html" title="displaying beautiful tables with Bootstrap Tables"/><published>2023-03-20T18:37:00+00:00</published><updated>2023-03-20T18:37:00+00:00</updated><id>https://zichengma.github.io/blog/2023/tables</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/tables/"><![CDATA[<p>Using markdown to display tables is easy. Just use the following syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       | center 1       | right 1       |
| Left 2       | center 2       | right 2       |
| Left 3       | center 3       | right 3       |
</code></pre></div></div> <p>That will generate:</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <p>It is also possible to use HTML to display tables. For example, the following HTML code will display a table with <a href="https://bootstrap-table.com/">Bootstrap Table</a>, loaded from a JSON file:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">id=</span><span class="s">"table"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-field="id">ID</th> <th data-field="name">Item Name</th> <th data-field="price">Item Price</th> </tr> </thead> </table> <p></p> <p>By using <a href="https://bootstrap-table.com/">Bootstrap Table</a> it is possible to create pretty complex tables, with pagination, search, and more. For example, the following HTML code will display a table, loaded from a JSON file, with pagination, search, checkboxes, and header/content alignment. For more information, check the <a href="https://examples.bootstrap-table.com/index.html">documentation</a>.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">data-click-to-select=</span><span class="s">"true"</span>
  <span class="na">data-height=</span><span class="s">"460"</span>
  <span class="na">data-pagination=</span><span class="s">"true"</span>
  <span class="na">data-search=</span><span class="s">"true"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-checkbox=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span> <span class="na">data-halign=</span><span class="s">"left"</span> <span class="na">data-align=</span><span class="s">"center"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span> <span class="na">data-halign=</span><span class="s">"center"</span> <span class="na">data-align=</span><span class="s">"right"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span> <span class="na">data-halign=</span><span class="s">"right"</span> <span class="na">data-align=</span><span class="s">"left"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-click-to-select="true" data-height="460" data-pagination="true" data-search="true" data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-checkbox="true"></th> <th data-field="id" data-halign="left" data-align="center" data-sortable="true">ID</th> <th data-field="name" data-halign="center" data-align="right" data-sortable="true">Item Name</th> <th data-field="price" data-halign="right" data-align="left" data-sortable="true">Item Price</th> </tr> </thead> </table>]]></content><author><name></name></author><category term="sample-posts"/><summary type="html"><![CDATA[an example of how to use Bootstrap Tables]]></summary></entry><entry><title type="html">a post with table of contents</title><link href="https://zichengma.github.io/blog/2023/table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents"/><published>2023-03-20T15:59:00+00:00</published><updated>2023-03-20T15:59:00+00:00</updated><id>https://zichengma.github.io/blog/2023/table-of-contents</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents in the beginning of the post.</p> <h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2> <p>To add a table of contents to a post, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p> <h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h2 id="table-of-contents-options">Table of Contents Options</h2> <p>If you want to learn more about how to customize the table of contents, you can check the <a href="https://github.com/toshimaru/jekyll-toc">jekyll-toc</a> repository.</p> <h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="toc"/><summary type="html"><![CDATA[an example of a blog post with table of contents]]></summary></entry><entry><title type="html">CrimeMap</title><link href="https://zichengma.github.io/blog/2023/CrimemapUIUC/" rel="alternate" type="text/html" title="CrimeMap"/><published>2023-01-20T15:31:18+00:00</published><updated>2023-01-20T15:31:18+00:00</updated><id>https://zichengma.github.io/blog/2023/CrimemapUIUC</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/CrimemapUIUC/"><![CDATA[<h1 id="cimemap">CimeMap</h1> <p><strong>MySQL, ReactJS, NodeJS, Full-stack application</strong></p> <p>We built a comprehensive database with records of past crimes occurring near UIUC, providing users with the ability to perform the standard Create, Read, Update, and Delete (CRUD) operations on the data through our web page. To further enhance the user experience, we integrated the Google Maps API, allowing users to view the crimes on a map and gain a better understanding of their relative locations. Our web page was created using ReactJS and NodeJS, while the database was implemented on a Google Cloud MySQL server, ensuring secure data storage and efficient retrieval.</p> <h2 id="showase-of-our-map">Showase of our map</h2> <p><strong><a href="https://youtu.be/-z2Pg80oAbs">Demo video</a> is avaliable on YouTube!!</strong></p> <p><strong><a href="https://github.com/ZichengMa/CrimeMapUIUC">Repo</a> is here! There is clear documentation in this repo</strong></p> <p><img src="Untitled.png" alt="First view of our website" width="850"/></p> <p>First view of our website</p> <p><img src="Untitled1.png" alt="The most creative component â€” Crime Map" width="850"/></p> <p>The most creative component â€” Crime Map</p>]]></content><author><name></name></author><category term="projects"/><summary type="html"><![CDATA[A full stack project, combined with MySQL database and ReactJS]]></summary></entry><entry><title type="html">ZinixOS</title><link href="https://zichengma.github.io/blog/2023/ZinixOS/" rel="alternate" type="text/html" title="ZinixOS"/><published>2023-01-17T15:18:10+00:00</published><updated>2023-01-17T15:18:10+00:00</updated><id>https://zichengma.github.io/blog/2023/ZinixOS</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/ZinixOS/"><![CDATA[<h1 id="zinixos">ZinixOS</h1> <p>Our OS has been depolyed as an online appication. If you want to have have a try, please click the <a href="https://rong-hash.github.io/zinixos">link</a>.</p> <p><strong>C, x86 assembly, Operating System</strong></p> <p>This ambitious project is a Unix-like operating system built on the qemu virtual machine. It is the culmination of our operating system design course and is a testament to the hard work and dedication we put into this project. We developed this operating system from the ground up, ensuring that we could support a wide range of features and functionalities. We also added a number of unique features to make it stand out from other operating systems. Ultimately, this project was a great success and we are proud of the hard work and dedication we put into making it a reality. I also found great interest in operating system during this course</p> <ul> <li>Basic functionalities: Implemented an operating system supporting fundamental features such as scheduling, interrupts, system calls, exceptions, and file systems.</li> <li>Additionally, self-designed features were utilised to enhance the system, such as an implicit free list and slab cache to implement a virtual memory allocation system. Furthermore, advanced signals, speaker and hard-disk drivers were also implemented to the system, allowing for an increase in functionality and performance.</li> </ul> <h2 id="show-case-of-our-os">Show case of our OS</h2> <p>Two types of memory management</p> <ol> <li>Fixed length memory allocation</li> <li>Variable length memory allocation</li> </ol> <h3 id="fixed-length--slab-cache">Fixed length â€” Slab Cache</h3> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">In</span> <span class="n">this</span> <span class="n">specific</span> <span class="n">implementation</span><span class="p">,</span> <span class="n">fixed</span> <span class="n">length</span> <span class="n">memory</span> <span class="n">allocation</span> <span class="n">is</span> <span class="n">implemented</span> <span class="n">by</span> <span class="n">two</span> <span class="n">parts</span><span class="p">,</span> <span class="n">memory</span> <span class="n">management</span> <span class="n">unit</span> <span class="n">and</span> <span class="n">memory</span> <span class="n">unit</span><span class="p">.</span>
<span class="n">fixed</span> <span class="n">length</span> <span class="n">diagram</span><span class="o">:</span>
        <span class="o">|</span><span class="n">memory</span> <span class="n">management</span> <span class="n">unit</span><span class="o">|</span>  <span class="o">|</span><span class="n">memory</span> <span class="n">management</span> <span class="n">unit</span><span class="o">|</span>  <span class="o">|</span><span class="n">memory</span> <span class="n">management</span> <span class="n">unit</span><span class="o">|</span>  <span class="p">..........</span>    <span class="o">|</span><span class="n">memory</span> <span class="n">unit</span><span class="o">|</span>  <span class="o">|</span><span class="n">memory</span> <span class="n">unit</span><span class="o">|</span> <span class="o">|</span><span class="n">memory</span> <span class="n">unit</span><span class="o">|</span> <span class="p">.....</span>
        <span class="o">|</span><span class="n">next</span><span class="o">|</span>  <span class="o">---------------&gt;</span>  <span class="o">|</span><span class="n">next</span><span class="o">|</span>  <span class="o">---------------&gt;</span>  <span class="o">|</span><span class="n">next</span><span class="o">|</span>                                      <span class="err">â†‘</span>              <span class="err">â†‘</span>             <span class="err">â†‘</span>
        <span class="o">|</span><span class="n">ptr</span><span class="o">|---------------------|</span><span class="n">ptr</span><span class="o">|---------------------|</span><span class="n">ptr</span><span class="o">|---------------------------------------</span><span class="err">â†‘</span><span class="o">--------------</span><span class="err">â†‘</span><span class="o">-------------</span><span class="err">â†‘</span>
</code></pre></div></div> <p>Data structure: Linked list</p> <ul> <li>Slab_Create ( name , size )</li> <li>destroy , malloc , free</li> <li>Automatically shrinks and grows</li> <li>quick and fast to allocate and free</li> <li>granularity: 1byte - 4kB-8 bytes</li> </ul> <h3 id="variable-length--implicit-free-list">Variable length â€” Implicit free list</h3> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">On</span> <span class="n">the</span> <span class="n">other</span> <span class="n">hand</span><span class="p">,</span> <span class="n">variable</span> <span class="n">length</span> <span class="n">memory</span> <span class="n">allocation</span> <span class="n">is</span> <span class="n">implemented</span> <span class="n">very</span> <span class="n">similar</span> <span class="n">to</span> <span class="n">Linux</span><span class="err">'</span><span class="n">s</span> <span class="n">implicit</span> <span class="n">free</span> <span class="n">list</span> <span class="n">design</span><span class="p">.</span> 
<span class="n">A</span> <span class="n">memory</span> <span class="n">part</span> <span class="n">consists</span> <span class="n">of</span> <span class="n">two</span> <span class="n">parts</span><span class="p">,</span> <span class="n">memory</span> <span class="n">management</span> <span class="n">unit</span> <span class="n">and</span> <span class="n">real</span> <span class="n">useable</span> <span class="n">memory</span> <span class="n">unit</span><span class="p">.</span>
<span class="n">Memory</span> <span class="n">management</span> <span class="n">units</span> <span class="n">are</span> <span class="n">held</span> <span class="n">in</span> <span class="n">a</span> <span class="n">linked</span> <span class="n">list</span> <span class="n">to</span> <span class="n">track</span> <span class="n">each</span> <span class="n">memory</span> <span class="n">fragments</span> <span class="n">have</span> <span class="n">been</span> <span class="n">allocated</span><span class="p">.</span>
<span class="n">variable</span> <span class="n">length</span> <span class="n">diagram</span><span class="o">:</span>
        <span class="o">|</span><span class="n">memory</span> <span class="n">mangement</span> <span class="n">unit</span><span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span><span class="n">memory</span> <span class="n">mangement</span> <span class="n">unit</span><span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span><span class="n">memory</span> <span class="n">mangement</span> <span class="n">unit</span><span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span><span class="n">memory</span> <span class="n">mangement</span> <span class="n">unit</span><span class="o">|</span>
        <span class="o">-----------------------</span>    <span class="o">-----------------------</span>    <span class="o">-----------------------</span>    <span class="o">-----------------------</span>
        <span class="o">|</span>                     <span class="o">|</span>    <span class="o">|</span>                     <span class="o">|</span>    <span class="o">|</span>                     <span class="o">|</span>    <span class="o">|</span>                     <span class="o">|</span>
        <span class="o">|</span>   <span class="n">useable</span> <span class="n">memory</span>    <span class="o">|</span>    <span class="o">|</span>   <span class="n">useable</span> <span class="n">memory</span>    <span class="o">|</span>    <span class="o">|</span>   <span class="n">useable</span> <span class="n">memory</span>    <span class="o">|</span>    <span class="o">|</span>   <span class="n">useable</span> <span class="n">memory</span>    <span class="o">|</span>
        <span class="o">|</span>                     <span class="o">|</span>    <span class="o">|</span>                     <span class="o">|</span>    <span class="o">-----------------------</span>    <span class="o">|</span>                     <span class="o">|</span>
        <span class="o">|</span>                     <span class="o">|</span>    <span class="o">-----------------------</span>                               <span class="o">-----------------------</span>
        <span class="o">|</span>                     <span class="o">|</span>
        <span class="o">-----------------------</span>

<span class="n">Slab</span> <span class="n">cache</span><span class="err">'</span><span class="n">s</span> <span class="n">implementation</span> <span class="n">is</span> <span class="n">based</span> <span class="n">on</span> <span class="n">fixed</span> <span class="n">length</span> <span class="n">memory</span> <span class="n">allocation</span><span class="p">.</span>
</code></pre></div></div> <p>Data structure: Implicit free list</p> <ul> <li>varmalloc( size )</li> <li>flexible: can allocate any size</li> <li>granularity: 1byte - 4MB</li> </ul> <p><img src="Untitled.png" alt="Memory allocation system and memory supevise system" style="zoom:50%;"/></p> <p>Memory allocation system and memory supevise system</p> <h2 id="signal">Signal</h2> <p>Support users to set handler they define</p> <p>Support sigreturn and set_handler syscall</p> <p>Support five signals:</p> <ol> <li>SIG_DIV_ZERO</li> <li>SIG_SEGFAULT</li> <li>SIG_INTERRUPT</li> <li>SIG_ALARM</li> <li>SIG_USER1</li> </ol> <p><img src="Untitled1.png" alt="signal tests for our signal implementation" style="zoom:50%;"/></p> <p>signal tests for our signal implementation</p> <h2 id="ata-hard-disk-support--file-system">ATA Hard Disk Support &amp; File System</h2> <ul> <li> <p>Writable file system</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">write</span> <span class="nx">fname</span> <span class="nx">contents</span>
</code></pre></div> </div> </li> <li> <p>Persistent Change (after reboot) by saving the change to the hard drive</p> </li> <li> <p>How the file system is loaded and initialized:</p> </li> </ul> <p><img src="Untitled2.png" alt="Untitled" style="zoom: 80%;"/></p> <h2 id="speaker-driver">Speaker Driver</h2> <p>Key mapping:</p> <p>(C3~E4) ZSXDCVGBHNJM,L.;/</p> <p>(C4~G5) Q2W3ER5T6Y7UI9O0P[=]</p> <p>Runs concurrently with any user programs &amp; across terminals</p> <p><img src="Untitled3.png" alt="part of the code for our â€˜keyboard pianoâ€™" style="zoom:50%;"/></p> <p>part of the code for our â€˜keyboard pianoâ€™</p>]]></content><author><name></name></author><category term="projects"/><summary type="html"><![CDATA[An operating system project from ECE391.]]></summary></entry><entry><title type="html">MedicalDB</title><link href="https://zichengma.github.io/blog/2023/MedicalDB/" rel="alternate" type="text/html" title="MedicalDB"/><published>2023-01-14T15:33:02+00:00</published><updated>2023-01-14T15:33:02+00:00</updated><id>https://zichengma.github.io/blog/2023/MedicalDB</id><content type="html" xml:base="https://zichengma.github.io/blog/2023/MedicalDB/"><![CDATA[<h1 id="medical-appointment-db">Medical Appointment DB</h1> <p><strong><em>B+ Tree, Hash Table, C++, UI</em></strong></p> <p>This database system is built to distribute medical appointments. We assume there are several hospitals and many patients. Every patient has certain properties used to identify their priority. Based on the priority and hospitalsâ€™ capacity, we will assign patients wisely.</p> <p>We used C++ to build a B+ Tree as the base for our database system. To make it more user-friendly, we implemented a UI instead of relying solely on terminal commands. Additionally, we imitated a SQL-style query language to make our system easier to learn for those familiar with SQL.</p> <h3 id="showcase-of-our-project">Showcase of our project</h3> <p><strong><a href="https://github.com/ZichengMa/CS225-DatabaseProject">Repo</a> is here !!!~~~</strong></p> <p><img src="Untitled.png" alt="Untitled" style="zoom: 67%;"/></p> <p><img src="Untitled1.png" alt="Untitled" style="zoom:67%;"/></p> <p><img src="Untitled2.png" alt="Untitled" style="zoom:67%;"/></p>]]></content><author><name></name></author><category term="projects"/><summary type="html"><![CDATA[Self-design database system based on B+Tree. Course project from CS225.]]></summary></entry></feed>